seq(min(us_state_populations$year)-1,
max(us_state_populations$year),5), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
seq(min(us_state_populations$year)-1,
max(us_state_populations$year)+100,5), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
c(1900,2000),5), include.lowest = T)
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
c(1900,2000), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
c(0, 1900,2000, 2011), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
c(1790, 1900,2000, 2011), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
us_state_populations<-read.csv("data/introductory_state_example.csv")
#esimesed 6 rida andmetest
head(us_state_populations)
#viimased 6 rida andmetest
tail(us_state_populations)
str(us_state_populations)
summary(us_state_populations)
#andmeraami dimensioonid
dim(us_state_populations)
library(tidyverse)
#tulemus omistatakse muutujale df_california_ny, aluseks võtame andmed
#muutujast us_state_populations
df_california_ny<-us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))
dim(df_california_ny)
head(df_california_ny)
df_california_ny_1900<-us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))%>%
filter(year>=1900)
dim(df_california_ny_1900)
head(df_california_ny_1900)
#populatsioon alates aastast 1900
us_state_populations %>%
#valime veerud year ja population
select(year, population) %>%
filter(year>=1900)%>%
glimpse()
#populatsioon kogu perioodi kohta
us_state_populations %>%
select(state, population) %>%
glimpse()
us_state_populations %>%
#otsib veerge mis sisaldavad mustrit "pop" ja lõppevad tähtedega "ion"
select(contains("pop"), ends_with("ion")) %>%
glimpse
us_state_populations %>%
rename(population=population, aasta = year, osariik=state) %>%
glimpse
us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))%>%
#grupeerime osariigi järgi
group_by(state)%>%
#arvutame iga grupi kohta keskmise ja st. hälve
summarise(keskmine=mean(population),mediaan=median(population), mood=mode(population),
sandardhälve=sd(population))
head(us_state_populations)
# dplyr approach
us_state_populations %>%
select(state, year) %>%
arrange(state)%>%
head()
us_state_populations %>%
select(state, year) %>%
arrange(desc(state))%>%
head()
#ilma tidyversita
head(us_state_populations[order(us_state_populations$state), c("state", "year")])
us_state_populations<-us_state_populations %>%
#mutate loob uue muutuja olemasolevate kõrvale
mutate(population_thousand=population/1000)
head(us_state_populations)
#asendame tühikud alakriipsuga
us_state_populations$state=gsub(" ", "_", us_state_populations$state)
#teeme väiketähtdeks
us_state_populations$state=tolower(us_state_populations$state)
head(us_state_populations)
#arvutame vaatluste arvu igas grupis
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(desc(count))%>%
head()
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(count)%>%
head()
#nüüd võime välja filtreerida osariigid, kus  on üle 20 vaatluse
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(desc(count))%>%
filter(count>20)
us_state_populations %>%
group_by(year) %>%
summarise(obs_count = n()) %>%
mutate(change = obs_count - lag(obs_count))%>%
head()
us_state_populations %>%
group_by(year) %>%
tally() %>%
mutate(change = n - lag(n))%>%
head()
#cut lõikab muutuja faktoriteks
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
seq(min(us_state_populations$year)-1,
max(us_state_populations$year)+2,5))
#vaatame
table(us_state_populations$year, us_state_populations$period)[1:5,1:6]
colSums(is.na(us_state_populations))
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
c(1790, 1900,2000, 2011), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
seq(min(us_state_populations$year)-1,
max(us_state_populations$year),5), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
us_state_populations<-read.csv("data/introductory_state_example.csv")
#esimesed 6 rida andmetest
head(us_state_populations)
#viimased 6 rida andmetest
tail(us_state_populations)
str(us_state_populations)
summary(us_state_populations)
#andmeraami dimensioonid
dim(us_state_populations)
library(tidyverse)
#tulemus omistatakse muutujale df_california_ny, aluseks võtame andmed
#muutujast us_state_populations
df_california_ny<-us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))
dim(df_california_ny)
head(df_california_ny)
df_california_ny_1900<-us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))%>%
filter(year>=1900)
dim(df_california_ny_1900)
head(df_california_ny_1900)
#populatsioon alates aastast 1900
us_state_populations %>%
#valime veerud year ja population
select(year, population) %>%
filter(year>=1900)%>%
glimpse()
#populatsioon kogu perioodi kohta
us_state_populations %>%
select(state, population) %>%
glimpse()
us_state_populations %>%
#otsib veerge mis sisaldavad mustrit "pop" ja lõppevad tähtedega "ion"
select(contains("pop"), ends_with("ion")) %>%
glimpse
us_state_populations %>%
rename(population=population, aasta = year, osariik=state) %>%
glimpse
us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))%>%
#grupeerime osariigi järgi
group_by(state)%>%
#arvutame iga grupi kohta keskmise ja st. hälve
summarise(keskmine=mean(population),mediaan=median(population), mood=mode(population),
sandardhälve=sd(population))
head(us_state_populations)
# dplyr approach
us_state_populations %>%
select(state, year) %>%
arrange(state)%>%
head()
us_state_populations %>%
select(state, year) %>%
arrange(desc(state))%>%
head()
#ilma tidyversita
head(us_state_populations[order(us_state_populations$state), c("state", "year")])
us_state_populations<-us_state_populations %>%
#mutate loob uue muutuja olemasolevate kõrvale
mutate(population_thousand=population/1000)
head(us_state_populations)
#asendame tühikud alakriipsuga
us_state_populations$state=gsub(" ", "_", us_state_populations$state)
#teeme väiketähtdeks
us_state_populations$state=tolower(us_state_populations$state)
head(us_state_populations)
#arvutame vaatluste arvu igas grupis
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(desc(count))%>%
head()
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(count)%>%
head()
#nüüd võime välja filtreerida osariigid, kus  on üle 20 vaatluse
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(desc(count))%>%
filter(count>20)
us_state_populations %>%
group_by(year) %>%
summarise(obs_count = n()) %>%
mutate(change = obs_count - lag(obs_count))%>%
head()
us_state_populations %>%
group_by(year) %>%
tally() %>%
mutate(change = n - lag(n))%>%
head()
#cut lõikab muutuja faktoriteks
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
seq(min(us_state_populations$year)-1,
max(us_state_populations$year)+2,5))
#vaatame
table(us_state_populations$year, us_state_populations$period)[1:5,1:6]
colSums(is.na(us_state_populations))
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
seq(min(us_state_populations$year)-1,
max(us_state_populations$year)+1,5), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
#mis aastatel puudub period väärtus?
us_state_populations[is.na(us_state_populations$period),]$year
#meie puhul on siin tegemist näpukaga.
us_state_populations$period<-cut(us_state_populations$year,
#seq genereerib annab kohad, mis jaotab pika intervalli väiksemateks
seq(min(us_state_populations$year)-1,
max(us_state_populations$year)+10,5), include.lowest = T)
us_state_populations[is.na(us_state_populations$period),]$year
arvutaKeskmine<-function(arvud){
summa=sum(arvud)
return(summa/length(arvud))
}
arvutaKeskmine<-function(arvud){
summa=sum(arvud)
return(summa/length(arvud))
}
arvutaKeskmine(c)
#funktsiooni sisend
c<-c(1,2,3)
#funktsiooni kasutamine
tulemus<-mean(c)
#funktsiooni väljundi väärtus
tulemus
arvutaKeskmine<-function(arvud){
summa=sum(arvud)
return(summa/length(arvud))
}
arvutaKeskmine(c)
sum(c)
arvutaKeskmine<-function(arvud){
summa=sum(arvud)
return(summa/length(arvud))
}
arvutaKeskmine(c)
sum(c)/length(c)
arvutaKeskmine<-function(arvud){
summa=sum(arvud)
n=length(arvud)
tulemus=summa/n
#tagastame tulemuse
return(tulemus)
}
arvutaKeskmine(c)
sum(c)/length(c)
arvutaKeskmine<-function(arvud){
summa=sum(arvud)
n=length(arvud)
tulemus=summa/n
#tagastame tulemuse
return(tulemus)
}
arvutaKeskmine(c)
vec=c(NA, NULL, 1, 2.0)
arvutaKeskmine(vec)
arvutaKeskmine<-function(arvud, na.rm=T){
if (na.rm) {
arvud=arvud[!is.na(arvud)]
}
summa=sum(arvud)
n=length(arvud)
tulemus=summa/n
#tagastame tulemuse
return(tulemus)
}
arvutaKeskmine(vec)
vec=c(NA, 1, 2.0)
arvutaKeskmine(vec)
arvutaKeskmine<-function(arvud, na.rm=T){
if (na.rm) {
arvud=arvud[!is.na(arvud)]
}
summa=sum(arvud)
n=length(arvud)
tulemus=summa/n
#tagastame tulemuse
return(tulemus)
}
arvutaKeskmine(vec)
vec=c(NULL, 1, 2.0)
arvutaKeskmine(vec)
vec=c(NA, NULL, 1, 2.0)
arvutaKeskmine(vec)
arvutaKeskmine<-function(arvud, na.rm=T){
if (na.rm) {
arvud=arvud[!is.na(arvud)]
}
summa=sum(arvud)
n=length(arvud)
tulemus=summa/n
#tagastame tulemuse
return(tulemus)
}
arvutaKeskmine(vec)
library(swirl)
install.packages("swirl")
library(swirl)
install_course("R Programming")
swirl()
5+7
x<-5+7
c=6
c=6
a=5
b=6
c=6
a=5
b=6
c=6
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
b=6
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sqrt(4)
log(10)
abs(-10)
c=c(10,4, 5)
sqrt(c)
sqrt(c)
sqrt(c)+15
sqrt(c)+c(15,15,15)
sqrt(c)+c(15)
sqrt(c)+c(15,15,15)
sqrt(c)+c(15,15)
#tehete järjekorra hoidmiseks saab kasutada ümarsulgusid
a<-5
b<-10
c<-20
a+b*c
(a+b)*c
isTRUE(c)
boolean1=TRUE
boolean2=TRUE
boolean3=FALSE
c=c(boolean1, boolean2, boolean3)
isTRUE(c)
c=c(boolean1, boolean2)
isTRUE(c)
(boolean1|boolean3)&boolean1
c(1:3)
rbind(mydata,(rep("uus", ncol(mydata))))
cbind(mydata,(rep("uus", ncol(mydata))))
mymatrix["R1","C1"]
y[[,1]]
a=c(1,2,3)
b=c(4,5,6)
a[i]
(for i in range(a)) {
a[i]
}
(for i in range(a)) {
a[i]
}
for (i in 1:range(a)) {
a[i]
}
a=c(1,2,3)
b=c(4,5,6)
for (i in 1:range(a)) {
a[i]
}
for (i in 1:range(a)) {
print(a[i])
}
for (i in 1:range(length(a))) {
print(a[i])
}
for (i in 1:length(a)) {
print(a[i])
}
a=c(1,2,3)
b=c(4,5,6)
tulemus=c()
for (i in 1:length(a)) {
tulemus[i]=a[i]+b[i]
}
tulemus
a+b
install.packages("caret")
library(caret)
library(caret)
#see on Riga kaasasolev andmehulk, laeme selle sisse
data(iris)
# nimetame selle ümber
dataset <- iris
View(dataset)
melt(dataset, id.vars=c("species"))
library(reshape2)
melt(dataset, id.vars=c("species"))
library(reshape2)
melt(dataset, id.vars=c("Species"))
ggplot(dataset_long, aes(x=Species, y=value))+
geom_density()+
facet_grid(.~variable)
library(reshape2)
dataset_long=melt(dataset, id.vars=c("Species"))
ggplot(dataset_long, aes(x=Species, y=value))+
geom_density()+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=Species, y=value))+
geom_density(y=value)+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=Species, y=value))+
geom_density(aes(y=value))+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=Species))+
geom_density(aes(y=value))+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=value))+
geom_density()+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=Species))+
geom_density()+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable)+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, freeny.x=T)+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, scales="free_y")+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, scales="free_x")+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, scales="free")+
theme_minimal()
install.packages("caret", dependencies=c("Depends", "Suggests"))
install.packages("caret", dependencies = c("Depends", "Suggests"))
