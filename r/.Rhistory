facet_grid(.~variable)
ggplot(dataset_long, aes(x=Species))+
geom_density(aes(y=value))+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=value))+
geom_density()+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=Species))+
geom_density()+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable)
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable)+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, freeny.x=T)+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, scales="free_y")+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, scales="free_x")+
theme_minimal()
ggplot(dataset_long, aes(x=value, group=Species, color=Species))+
geom_density()+
facet_grid(.~variable, scales="free")+
theme_minimal()
install.packages("caret", dependencies=c("Depends", "Suggests"))
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages('e1701')
install.packages('e1071')
install.packages("caret")
install.packages("caret", dependencies=c("Depends"))
install.packages('caret', dependencies=T)
library(swirl)
swirl()
x
x-3
y=x-3
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
exit
quit
bye()
swirl()
z
bye()
a=c(1,2,3)
b=c(4,5,6)
tulemus=c()
source('~/GitHub/RRisto.github.io/r/sample.R', echo=TRUE)
p=TRUE
a=TRUE
a==TRUE
vec1=c("tere", "halloo")
vec2=c("maja", "auto")
all.equal(vec1, vec2)
vec1==vec2
vec1==vec2
vec1=c("tere", "halloo")
vec2=c("tere", "halloo")
all.equal(vec1, vec2)
vec1==vec2
source('~/GitHub/RRisto.github.io/r/sample.R', echo=TRUE)
a=2
b=3
a
2
a<-1
a+b
2
a=1
a<-1
a+b
a<-1
a+b
source('~/GitHub/RRisto.github.io/r/sample.R', echo=TRUE)
1+2
2*2
x=1
y=2
x+y
z=x+y
z=X+y
z.d=4
z.d
z_d=4
x=x+y
x**y
x**y
sqrt(4)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
log(10)
a<-5
b<-10
c<-20
a+b*c
(a+b)*c
a<-5
b<-10
a<b
a<=b
a>=b
a
a<-5
b<-10
a<b
a<=b
a>=b
remove(a)
b=4
b=5
a==b
a<-5
a==b
a=b
a=4
a=b
a="b"
a=TRUE
boolean1=TRUE
boolean2=TRUE
boolean3=FALSE
!boolean1
boolean1 & boolean2
boolean1 & boolean3
boolean1 | boolean2
boolean1 | boolean3
tulemus=boolean1 | boolean3
a = c(1,2, TRUE,"tere")
vec = c(1,2, TRUE,"tere")
vec = c(1, 2, TRUE, "tere")
vec[3]
a=vec[3]
vec[3]
vec[1:3]
vec[3:1]
vec[c(1,4)]
vec[1,4]
vec1=c(1,2,3,4)
vec1[vec1>2]
vec1>2
vec1[vec1>2&vec1<4]
length(vec1)
1:3
1:3
length(vec1)
vec[4:1]
vec[length(vec):1]
vec[-1]
vec[-c(1,2)]
vec[vec=='tere']
vec[!vec=='tere']
data.frame(vec, vec1)
vec=c(1,2,3)
vec1=c(5,6,7)
data.frame(vec, vec1)
df=data.frame(vec, vec1)
View(df)
View(df)
names(df)=c("esimene", "teine")
df[1]
df[1,1]
is.na(df[1])
df[c(1,2), c(1,2)]
dim(df)
dim(df)
df[c("esimene")]
df$esimene
ncol(df)
nrow(df)
df
df[1,1]=100
df
df2=df
df2
df_all=rbind(df,df2)
df_all
x <- data.frame(k1 = c(NA,NA,3,4,5),
k2 = c(1,NA,NA,4,5),
data = 1:5)
y <- data.frame(k1 = c(NA,2,NA,4,5),
k2 = c(NA,NA,3,4,5),
data = 1:5)
View(x)
View(y)
View(df2)
View(x)
View(y)
x <- data.frame(k1 = c(NA,NA,3,4,5),
k2 = c(1,NA,NA,4,5),
data = 1:5)
y <- data.frame(k1 = c(NA,2,NA,4,5),
k2 = c(NA,NA,3,4,5),
data = 1:5)
merge(x, y, by = c("k1","k2")) # NA's match
View(x)
merge(x, y, by.x='data', by.y='data') # NA's match
View(x)
states=read.csv('data/states.csv')
library(swirl)
swirl()
View(df)
source('~/.active-rstudio-document', echo=TRUE)
head(us_state_populations)
str(us_state_populations)
summary(us_state_populations)
df_california_ny<-us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))
dim(df_california_ny)
head(df_california_ny)
View(df_california_ny)
unique(df_california_ny[,c('state')])
unique(df_california_ny$state)
df_california_ny_1900<-us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))%>%
filter(year>=1900)
dim(df_california_ny_1900)
View(df_california_ny_1900)
us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))%>%
#grupeerime osariigi järgi
group_by(state)%>%
#arvutame iga grupi kohta keskmise ja st. hälve
summarise(keskmine=mean(population),
mediaan=median(population),
mood=mode(population),
sandardhälve=sd(population))
df_describe=us_state_populations %>%
#filtreerimne välja osariigid, millen nimed on alltoodud vektoris c(...)
filter(state %in% c("California", "New York"))%>%
#grupeerime osariigi järgi
group_by(state)%>%
#arvutame iga grupi kohta keskmise ja st. hälve
summarise(keskmine=mean(population),
mediaan=median(population),
mood=mode(population),
sandardhälve=sd(population))
View(df_describe)
us_state_populations<-us_state_populations %>%
#mutate loob uue muutuja olemasolevate kõrvale
mutate(population_thousand=population/1000)
View(us_state_populations)
#asendame tühikud alakriipsuga
us_state_populations$state=gsub(" ", "_", us_state_populations$state)
#teeme väiketähtdeks
us_state_populations$state=tolower(us_state_populations$state)
head(us_state_populations)
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>% #n() tähendab counti, käesoleval iga grupi (osariigi) elementide counti
arrange(desc(count))%>%
head()
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(count)%>%
head()
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(count)%>%
head(20)
#nüüd võime välja filtreerida osariigid, kus  on üle 20 vaatluse
us_state_populations%>%
group_by(state)%>%
summarise(count=n())%>%
arrange(desc(count))%>%
filter(count>20)
us_state_populations %>%
group_by(year) %>%
summarise(obs_count = n()) %>%
#lag() võtab eelmise grupi (aasta) obs_count väärtuse
mutate(change = obs_count - lag(obs_count))%>%
head()
data_wide <- spread(us_state_populations[,c('year','state','population')], year, population)
head(data_wide)
library(reshape2)
data_long<-melt(data_wide, id=c("state"))
tail(data_long)
us_state_populations<-read.csv("data/introductory_state_example.csv")
us_state_populations$population_thousand=us_state_populations$population/1000
plot(us_state_populations$year,us_state_populations$population_thousand,
main="Scatterplot of year vs population")
hist(us_state_populations$population_thousand, main="Histogram of population", breaks = 20)
hist(us_state_populations$population_thousand, main="Histogram of population", breaks = 30)
boxplot(us_state_populations$population_thousand, main="Boxplot of population"
boxplot(us_state_populations$population_thousand, main="Boxplot of population")
boxplot(us_state_populations$population_thousand, main="Boxplot of population")
##ggplot
library(tidyverse)
plt=ggplot(us_state_populations, aes(year, population_thousand))+
#lisame geom kihi, antud juhul tahame punkte
geom_point()+
ggtitle("Population distribution")+
theme_minimal()
plt
#geom smooth lisab trendijoone (tehes mudeli võimaliku trendi kohta)
plt+geom_smooth()+
#täpsustame regressiooni tüübi, tahame lineaarset regressiooni
geom_smooth(method=lm, color='lightgreen')+
theme_classic()
ggplot(us_state_populations, aes(year, population_thousand))+
#ajab punktid juhuslikkusega laiali, alpha määrab läbipaistvuse
geom_jitter(alpha=0.3, color="blue")+
ggtitle("Population distribution")+
theme_minimal()
ggplot(us_state_populations, aes(year, population_thousand))+
#ajab punktid juhuslikkusega laiali, alpha määrab läbipaistvuse
geom_jitter(alpha=0.3, color="blue")+
ggtitle("Population distribution")+
geom_smooth(method=lm, color='lightgreen')+
theme_minimal()
ggplot(us_state_populations, aes(year, population_thousand))+
#ajab punktid juhuslikkusega laiali, alpha määrab läbipaistvuse
geom_jitter(alpha=0.3, color="blue")+
ggtitle("Population distribution")+
geom_smooth(method=lm, color='red')+
theme_minimal()
df_ohio=us_state_populations[us_state_populations$state=="Ohio",]
#plotime
ggplot(df_ohio, aes(year, population_thousand))+
geom_line(color="red")+
ggtitle("Population of Ohio")+
theme_minimal()
df_ohio_alabama=us_state_populations[us_state_populations$state %in% c('Ohio', 'Alabama'),]
ggplot(df_ohio_alabama, aes(year, population_thousand))+
geom_line(aes(group=state, color=state))+
ggtitle("Population of Ohio and Alabama")+
theme_minimal()
ggplot(df_ohio_alabama, aes(year, population_thousand))+
#stat=identity määrab, et näitab muutuja tegelikku väärtust, mitte counti
#position_dodge() tõstab tulbad, üksteise kõrvale
geom_bar(stat='identity', aes(fill=state), position=position_dodge())+
ggtitle("Population of Ohio and Alabama")+
theme_minimal()
ggplot(us_state_populations, aes(year, population_thousand, group=year))+
geom_boxplot(fill='lightgreen', color='blue')+
ggtitle("Distribution of population")+
theme_minimal()
#histogram
ggplot(us_state_populations, aes(x=population_thousand))+
geom_histogram(color="black", fill="lightblue", linetype="dashed")+
theme_light()
ggplot(us_state_populations, aes(x=population_thousand))+
geom_density(color="black", fill="lightblue", linetype="dashed")+
theme_light()
alaska_alabama_california=us_state_populations[us_state_populations$state %in%
c("Alaska", "Alabama", "California"), ]
ggplot(alaska_alabama_california, aes(x=year, y=population_thousand))+
geom_point()+
facet_wrap(~state, ncol=3,scales = "free_y")+
theme_minimal()
p <- ggplot(mtcars, aes(disp, wt)) +
geom_point() +
geom_smooth()+
theme_minimal()
p
p+xlim(200,350)
#aga nüüd
p + coord_cartesian(xlim = c(200, 350))
source('~/GitHub/RRisto.github.io/r/3.1_graafikud.R', encoding = 'UTF-8', echo=TRUE)
#salvestab välja prinditud ploti faili
ggsave("myplot.png", width = 4, height = 4)
df=read.csv('data/mat.csv')
df=read.csv('data/mat.csv')
df=read.csv('data/mat.csv')
tiff(file = "myplot.tiff")
plot(df)
dev.off()
df=read.csv('data/mat.csv', header = F)
View(df)
df=read.csv('data/mat.csv', header = F, sep=';')
View(df)
View(df)
df=read.csv('data/mat.csv', header = F, sep=';')
tiff(file = "myplot.tiff")
plot(df)
dev.off()
m <- matrix(rep(1:234, each = 14), ncol = 14, byrow = TRUE)
l <- list(x = 1:nrow(m), y = 1:ncol(m), z = m)
library(rgdal)
x <- image2Grid(l)
writeGDAL(x, "out.tif")
install.packages('rgdal')
m <- matrix(rep(1:234, each = 14), ncol = 14, byrow = TRUE)
l <- list(x = 1:nrow(m), y = 1:ncol(m), z = m)
library(rgdal)
x <- image2Grid(l)
writeGDAL(x, "out.tif")
image(df)
image(1:5, 1:5, df, col=gray((0:255)/255))
View(df)
df=read.csv('data/mat.csv', header = F, sep=';')
View(df)
df=read.csv('data/mat.csv', header = F, sep=';')
View(df)
df=read.csv('data/mat.csv', header = F, sep=';')
View(df)
df=read_xlsx('data/mat.xlsx')
df=read_excel('data/mat.xlsx')
library(readxl)
df=read_excel('data/mat.xlsx')
View(df)
df=read_excel('data/mat.xlsx', col_names = F)
View(df)
library(rgdal)
x <- image2Grid(df)
writeGDAL(x, "out.tif")
image(1:5, 1:5, df, col=gray((0:255)/255))
View(df)
summary(df)
df <- apply(df, 2, as.numeric)
image(1:5, 1:5, df, col=gray((0:255)/255))
tiff(file = "myplot.tiff")
image(1:5, 1:5, df, col=gray((0:255)/255))
dev.off()
#get files in direcotry
list.files()
#get files in direcotry
list.files(pattern = '*.csv')
#get files in direcotry
list.files('data/',pattern = '*.csv')
"ad"+"bs"
paste("ab", "df")
paste("ab", "df", sep="")
list.files('data/',pattern = '*.csv')
library(readxl)
df=read_excel('data/mat.xlsx', col_names = F)
#library(rgdal)
#x <- image2Grid(df)
#writeGDAL(x, "out.tif")
df <- apply(df, 2, as.numeric)
tiff(file = "myplot.tiff")
image(1:5, 1:5, df, col=gray((0:255)/255))
dev.off()
df=read.csv('data/example_csv/mat.csv')
View(df)
df=read.csv2('data/example_csv/mat.csv')
View(df)
#get files in direcotry
csv_files=list.files('data/example_csv/',pattern = '*.csv')
#get files in direcotry
xlsx_files=list.files('data/example_csv/',pattern = '*xlsx')
for (fl in xlsx_files) {
print(fl)
}
fl
fl.split('.')
fl.split()
strsplit(fl, '.')
strsplit(fl, '\.')
strsplit(fl, '.xlsx')
library(readxl)
#get files in direcotry
xlsx_files=list.files('data/example_csv/',pattern = '*xlsx')
for (fl in xlsx_files) {
print(fl)
#teekond failini
path=paste('data/example_csv/',fl,sep='')
#loeme faili sisse
df=read_excel(path, col_names = F)
#muudame arvuliseks väärtused
df <- apply(df, 2, as.numeric)
#faili nimi ilma laiendita
name=strsplit(fl, '.xlsx')
#lisame tiff laiendi
name=paste(name, '.tiff')
#lisame teekonna piltide kausta
name=paste('data/example_csv/plots/', name, sep='')
tiff(file = name)
#joonistame pildi, 1:5 ja 1:5 näitavad dimensioone, hetkel on meil 5 rida ja veergu
image(1:5, 1:5, df, col=gray((0:255)/255))
dev.off()
}
library(readxl)
#get files in direcotry
xlsx_files=list.files('data/example_csv/',pattern = '*xlsx')
for (fl in xlsx_files) {
print(fl)
#teekond failini
path=paste('data/example_csv/',fl,sep='')
#loeme faili sisse
df=read_excel(path, col_names = F)
#muudame arvuliseks väärtused
df <- apply(df, 2, as.numeric)
#faili nimi ilma laiendita
name=strsplit(fl, '.xlsx')
#lisame tiff laiendi
name=paste(name, '.tiff')
#lisame teekonna piltide kausta
name=paste('data/example_csv/plots/', name, sep='')
tiff(file = name)
#joonistame pildi, 1:5 ja 1:5 näitavad dimensioone, hetkel on meil 5 rida ja veergu
image(1:5, 1:5, df, col=gray((0:255)/255))
dev.off()
}
